/*
 * Copyright 2017 softcake.org.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

if (!isCi) {
    apply plugin: "idea"

    idea {

        project {

            jdkName "1.8"
            languageLevel "1.8"
            vcs = "Git"

            createCopyright()
            createCodeStyle()
        }
    }

}

void createCopyright() {
    def copyrightFolderPath = "${rootDir}/.idea/copyright"
    def copyrightFolder = new File(copyrightFolderPath)

    if (!copyrightFolder.exists()) {

        copyrightFolder.mkdirs()

    }

    def copyrightFile = new File(copyrightFolderPath + "/ASL2.xml")

    if (!copyrightFile.exists()) {
        copyrightFile.write("""<component name="CopyrightManager">
	<copyright>
		<option name="notice" value="Copyright \$today.year softcake.org.&#10;&#10;Licensed under the Apache License, Version 2.0 (the &quot;License&quot;);&#10;you may not use this file except in compliance with the License.&#10;You may obtain a copy of the License at&#10;&#10;   http://www.apache.org/licenses/LICENSE-2.0&#10;&#10;Unless required by applicable law or agreed to in writing, software&#10;distributed under the License is distributed on an &quot;AS IS&quot; BASIS,&#10;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#10;See the License for the specific language governing permissions and&#10;limitations under the License." />
        <option name="keyword" value="Copyright" />
        <option name="allowReplaceKeyword" value="" />
        <option name="myName" value="ASL2" />
        <option name="myLocal" value="true" />
	</copyright>
</component>""")
    }

    def profileSettings = new File(copyrightFolderPath + "/profiles_settings.xml")

    if (profileSettings.exists()) {

        def copyrightManager = new XmlParser().parse(profileSettings)

        def copyrightManagerSettings = copyrightManager.children().find {

            it.name() == "settings"

        }

        copyrightManagerSettings.@default = "ASL2"

        def module2copyright = copyrightManagerSettings.module2copyright

        def productionCodeModule = module2copyright.element.find {

            it.@module == "Production" && it.@copyright == "ASL2"

        }

        if (!module2copyright) {

            copyrightManagerSettings.append(new XmlParser().parseText("""<module2copyright>
	<element module="Production" copyright="ASL2" />
</module2copyright>"""))

        } else if (productionCodeModule == null) {

            module2copyright.first().append(
                    new XmlParser().parseText("""<element module="Production" copyright="ASL2" />"""))
        }

        new XmlNodePrinter(new PrintWriter(new FileWriter(profileSettings))).print(copyrightManager)

    } else {
        profileSettings.write("""<component name="CopyrightManager">
	<settings default="ASL2">
		<module2copyright>
			<element module="Production" copyright="ASL2" />
		</module2copyright>
	</settings>
</component>""")
    }
}


void createCodeStyle() {
    def codeStyleFolderPath = "${rootDir}/.idea"

    def codeStyleFile = new File(codeStyleFolderPath + "/codeStyleSettings.xml")

    if (!codeStyleFile.exists()) {
        codeStyleFile.write(
                """<?xml version="1.0" encoding="UTF-8"?><project version="4"><component name="ProjectCodeStyleSettingsManager"></component></project>""")
    }

    def node = new XmlParser().parse(codeStyleFile)

    def codeStyleSettingsManager = node.component.find {
        it.@name == "ProjectCodeStyleSettingsManager"
    }

    def newCodeStyle = new XmlParser().parse(file("gradle/idea/codeStyle.xml"))

    if (codeStyleSettingsManager) {
        codeStyleSettingsManager.replaceNode(newCodeStyle)
    } else {
        node.append(newCodeStyle)
    }

    new XmlNodePrinter(new PrintWriter(new FileWriter(codeStyleFile))).print(node)


}
